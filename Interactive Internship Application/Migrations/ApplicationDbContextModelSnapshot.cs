// <auto-generated />
using System;
using Interactive_Internship_Application.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Interactive_Internship_Application.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Interactive_Internship_Application.Models.ApplicationData", b =>
                {
                    b.Property<int>("RecordId")
                        .HasColumnName("record_id");

                    b.Property<int>("DataKeyId")
                        .HasColumnName("data_key_id");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("RecordId", "DataKeyId")
                        .HasName("PK__APPLICAT__71F78C458526B05D");

                    b.HasIndex("DataKeyId");

                    b.ToTable("APPLICATION_DATA");
                });

            modelBuilder.Entity("Interactive_Internship_Application.Models.ApplicationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ControlType")
                        .HasColumnName("control_type")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<bool?>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("Entity")
                        .HasColumnName("entity")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("FieldDescription")
                        .HasColumnName("field_description")
                        .HasMaxLength(1024)
                        .IsUnicode(false);

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnName("field_name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("ProperName")
                        .HasColumnName("proper_name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("APPLICATION_TEMPLATE");
                });

            modelBuilder.Entity("Interactive_Internship_Application.Models.EmployerLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<short?>("Pin")
                        .HasColumnName("pin");

                    b.Property<string>("StudentEmail")
                        .HasColumnName("student_email")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ__EMPLOYER__AB6E616458DB5CE9");

                    b.HasIndex("StudentEmail");

                    b.ToTable("EMPLOYER_LOGIN");
                });

            modelBuilder.Entity("Interactive_Internship_Application.Models.FacultyInformation", b =>
                {
                    b.Property<string>("CourseName")
                        .HasColumnName("course_name")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("DeptRepEmail")
                        .HasColumnName("dept_rep_email")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<string>("ProfEmail")
                        .HasColumnName("prof_email")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.HasKey("CourseName")
                        .HasName("PK__FACULTY___B5B2A66B331366DA");

                    b.ToTable("FACULTY_INFORMATION");
                });

            modelBuilder.Entity("Interactive_Internship_Application.Models.StudentInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(512)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnName("last_login")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UQ__STUDENT___AB6E6164E42D1D12");

                    b.ToTable("STUDENT_INFORMATION");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Interactive_Internship_Application.Models.ApplicationData", b =>
                {
                    b.HasOne("Interactive_Internship_Application.Models.ApplicationTemplate", "DataKey")
                        .WithMany("ApplicationData")
                        .HasForeignKey("DataKeyId")
                        .HasConstraintName("FK__APPLICATI__data___1A9EF37A");

                    b.HasOne("Interactive_Internship_Application.Models.StudentInformation", "Record")
                        .WithMany("ApplicationData")
                        .HasForeignKey("RecordId")
                        .HasConstraintName("FK__APPLICATI__recor__19AACF41");
                });

            modelBuilder.Entity("Interactive_Internship_Application.Models.EmployerLogin", b =>
                {
                    b.HasOne("Interactive_Internship_Application.Models.StudentInformation", "StudentEmailNavigation")
                        .WithMany("EmployerLogin")
                        .HasForeignKey("StudentEmail")
                        .HasConstraintName("FK__EMPLOYER___stude__12FDD1B2")
                        .HasPrincipalKey("Email")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
